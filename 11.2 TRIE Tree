#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define ALPHABET_SIZE 26

struct TrieNode {
    struct TrieNode* children[ALPHABET_SIZE];
    bool isEndOfWord;
};

struct TrieNode* createNode() {
    struct TrieNode* newNode = (struct TrieNode*)malloc(sizeof(struct TrieNode));
    if (newNode) {
        newNode->isEndOfWord = false;
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            newNode->children[i] = NULL;
        }
    }
    return newNode;
}

void insert(struct TrieNode* root, const char* key) {
    struct TrieNode* current = root;
    for (int level = 0; key[level] != '\0'; level++) {
        int index = key[level] - 'a';
        if (!current->children[index]) {
            current->children[index] = createNode();
        }
        current = current->children[index];
    }
    current->isEndOfWord = true;
}

bool search(struct TrieNode* root, const char* key) {
    struct TrieNode* current = root;
    for (int level = 0; key[level] != '\0'; level++) {
        int index = key[level] - 'a';
        if (!current->children[index]) {
            return false;
        }
        current = current->children[index];
    }
    return (current != NULL && current->isEndOfWord);
}

bool isEmpty(struct TrieNode* node) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (node->children[i] != NULL) {
            return false;
        }
    }
    return true;
}

bool removeHelper(struct TrieNode* node, const char* key, int level, int len) {
    if (node) {
        if (level == len) {
            if (node->isEndOfWord) {
                node->isEndOfWord = false;
                return isEmpty(node);
            }
        } else {
            int index = key[level] - 'a';
            if (removeHelper(node->children[index], key, level + 1, len)) {
                free(node->children[index]);
                node->children[index] = NULL;
                return !node->isEndOfWord && isEmpty(node);
            }
        }
    }
    return false;
}

void removeWord(struct TrieNode* root, const char* key) {
    int len = strlen(key);
    if (len > 0) {
        removeHelper(root, key, 0, len);
    }
}

void freeTrie(struct TrieNode* node) {
    if (node) {
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            freeTrie(node->children[i]);
        }
        free(node);
    }
}

int main() {
	printf("Name: Philip Gracian Sanova\nReg no: 192324023\n");
	
    struct TrieNode* root = createNode();

    insert(root, "apple");
    insert(root, "app");
    insert(root, "banana");

    printf("Search 'apple': %s\n", search(root, "apple") ? "Found" : "Not Found");
    printf("Search 'app': %s\n", search(root, "app") ? "Found" : "Not Found");
    printf("Search 'orange': %s\n", search(root, "orange") ? "Found" : "Not Found");

    removeWord(root, "apple");
    printf("Search 'apple' after removal: %s\n", search(root, "apple") ? "Found" : "Not Found");

    freeTrie(root);

    return 0;
}

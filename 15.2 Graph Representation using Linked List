#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int vertex;
    struct Node* next;
};

struct Graph {
    int vertices;
    struct Node** adjacencyList;
};

struct Node* createNode(int vertex) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->vertices = vertices;
    
    graph->adjacencyList = (struct Node**)malloc(vertices * sizeof(struct Node*));

    for (int i = 0; i < vertices; ++i) {
        graph->adjacencyList[i] = NULL;
    }

    return graph;
}

void addEdge(struct Graph* graph, int from, int to) {
    struct Node* newNode = createNode(to);
    newNode->next = graph->adjacencyList[from];
    graph->adjacencyList[from] = newNode;
}

void printGraph(struct Graph* graph) {
    for (int i = 0; i < graph->vertices; ++i) {
        struct Node* current = graph->adjacencyList[i];
        printf("Adjacency list for vertex %d: ", i);
        while (current != NULL) {
            printf("%d -> ", current->vertex);
            current = current->next;
        }
        printf("NULL\n");
    }
}

int main() {
	int vertices = 6;
    struct Graph* graph = createGraph(vertices);

    addEdge(graph,1,2);
    addEdge(graph,1,4);
    addEdge(graph,2,5);
    addEdge(graph,3,5);
	addEdge(graph,3,6);
	addEdge(graph,4,2);
	addEdge(graph,5,4);
	addEdge(graph,6,6);
	printGraph(graph);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>

#define ORDER 3

struct BTreeNode {
    int leaf;
    int n;
    int keys[ORDER - 1];
    struct BTreeNode* children[ORDER];
};

struct BTreeNode* createNode() {
    struct BTreeNode* newNode = (struct BTreeNode*)malloc(sizeof(struct BTreeNode));
    newNode->leaf = 1;
    newNode->n = 0;
    for (int i = 0; i < ORDER - 1; i++) {
        newNode->keys[i] = 0;
        newNode->children[i] = NULL;
    }
    newNode->children[ORDER - 1] = NULL;
    return newNode;
}

void splitChild(struct BTreeNode* x, int i) {
    struct BTreeNode* y = x->children[i];
    struct BTreeNode* z = createNode();
    z->leaf = y->leaf;
    z->n = ORDER / 2 - 1;
    for (int j = 0; j < ORDER / 2 - 1; j++) {
        z->keys[j] = y->keys[j + ORDER / 2];
    }
    if (!y->leaf) {
        for (int j = 0; j < ORDER / 2; j++) {
            z->children[j] = y->children[j + ORDER / 2];
        }
    }
    y->n = ORDER / 2 - 1;

    for (int j = x->n; j > i; j--) {
        x->children[j + 1] = x->children[j];
    }
    x->children[i + 1] = z;

    for (int j = x->n - 1; j >= i; j--) {
        x->keys[j + 1] = x->keys[j];
    }
    x->keys[i] = y->keys[ORDER / 2 - 1];
    x->n++;
}

void insertNonFull(struct BTreeNode* x, int key) {
    int i = x->n - 1;
    if (x->leaf) {
        while (i >= 0 && key < x->keys[i]) {
            x->keys[i + 1] = x->keys[i];
            i--;
        }
        x->keys[i + 1] = key;
        x->n++;
    } else {
        while (i >= 0 && key < x->keys[i]) {
            i--;
        }
        i++;
        if (x->children[i]->n == ORDER - 1) {
            splitChild(x, i);
            if (key > x->keys[i]) {
                i++;
            }
        }
        insertNonFull(x->children[i], key);
    }
}

void insert(struct BTreeNode** root, int key) {
    struct BTreeNode* newNode = createNode();
    newNode->leaf = 0;
    newNode->children[0] = *root;

    if ((*root)->n == ORDER - 1) {
        splitChild(newNode, 0);
        *root = newNode;
    }
    insertNonFull(*root, key);
}


void inOrderTraversal(struct BTreeNode* root) {
    if (root != NULL) {
        int i;
        for (i = 0; i < root->n; i++) {
            inOrderTraversal(root->children[i]);
            printf("%d ", root->keys[i]);
        }
        inOrderTraversal(root->children[i]);
    }
}

int main() {
    struct BTreeNode* root = createNode();

    int keys[] = {0,1,2,3,4,5,6};
    int n = sizeof(keys) / sizeof(keys[0]);

    for (int i = 0; i < n; i++) {
        insert(&root, keys[i]);
    }

    printf("In-order traversal of the B-tree: ");
    inOrderTraversal(root);
    printf("\n");

    return 0;
}

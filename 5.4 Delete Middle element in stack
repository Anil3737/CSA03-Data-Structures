//Given a stack, delete the middle element of the stack without using any additional data structure. Middle element:- floor((size_of_stack+1)/2) (1-based indexing) from bottom of the stack.
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

struct Stack {
    int arr[MAX_SIZE];
    int top;
};

void initialize(struct Stack *stack) {
    stack->top = -1;
}

int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

int isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack *stack, int data) {
    if (isFull(stack)) {
        fprintf(stderr, "Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    stack->arr[++stack->top] = data;
}

int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        fprintf(stderr, "Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return stack->arr[stack->top--];
}

int getSize(struct Stack *stack) {
    return stack->top + 1;
}

void deleteMiddle(struct Stack *stack, int current) {
    if (isEmpty(stack) || current == 0) {
        return;
    }

    int temp = pop(stack);
    deleteMiddle(stack, current - 1);

    if (current != getSize(stack) + 1 / 2) {
        push(stack, temp);
    }
}

void display(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return;
    }

    printf("Stack: ");
    for (int i = 0; i <= stack->top; ++i) {
        printf("%d ", stack->arr[i]);
    }
    printf("\n");
}

int main() {
	printf("Name: Philip Gracian Sanova\nReg no: 192324023\n");
    struct Stack stack;
    initialize(&stack);

    for (int i = 1; i <= 5; ++i) {
        push(&stack, i);
    }

    printf("Original Stack:\n");
    display(&stack);

    deleteMiddle(&stack, getSize(&stack));

    printf("\nStack after deleting the middle element:\n");
    display(&stack);

    return 0;
}
